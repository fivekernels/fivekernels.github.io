[{"content":"基于 AutoApi v6.4\nfork from https://github.com/Innersider/cactial-AutoAPI.git\n基本知识 v6.4 action 添加结束workflow? https://github.com/canmeng99/AutoApi\n1 2 3 4 5 6 7 8 9  build: ...... steps: ...... - name: Delete workflow runs uses: GitRML/delete-workflow-runs@main with: retain_days: 1 keep_minimum_runs: 1   添加 workflow 保持action活跃 action keep workflow alive https://github.com/ccknbc-actions/E5-Developer\n","permalink":"https://fivekernels.github.io/posts/microsoft365-e5-renew-with-github-actions/","summary":"基于 AutoApi v6.4 fork from https://github.com/Innersider/cactial-AutoAPI.git 基本知识 v6.4 action 添加结束workflow? https://github.com/canmeng99/AutoApi 1 2 3 4 5 6 7 8 9 build: ...... steps: ...... - name: Delete workflow runs uses: GitRML/delete-workflow-runs@main with: retain_days: 1 keep_minimum_runs: 1 添加 workflow 保持action活跃 action keep workflow alive https://github.com/ccknbc-actions/E5-Developer","title":"Microsoft365 E5 续订——Github Actions"},{"content":" 开启 Fiddler 抓包时，python 中的 requests.get()、requests.post() 数据包无法捕获，且在请求 https 时会产生 ssl.SSLError: [SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:1091) 错误。因此对于其请求应当做一定的修改。\nFiddler 证书导出  打开 Fiddler，依次选择 Tools-Options\u0026hellip;-HTTPS，点击右侧 Actions 中的 Open Windows Certificate Manager。\n 展开个人-证书，在右侧找到证书“DO_NOT_TRUST_FiddlerRoot”，右键-所有任务-导出。不导出私钥、选择编码方式为 Base64 X.509，得到 .cer 格式的文件。\nrequests 参数设置  将得到的 .cer 文件后缀改为 .crt，放到项目文件夹下，在 requests 请求前添加如下配置并添加请求参数即可。\n1 2 3  proxies = {\u0026#39;http\u0026#39;:\u0026#39;http://127.0.0.1:8888\u0026#39;,\u0026#39;https\u0026#39;:\u0026#39;https://127.0.0.1:8888\u0026#39;} certFile = \u0026#39;.\\fiddlerCert.crt\u0026#39;) r = requests.get(\u0026#34;https://exampleurl.example.com\u0026#34;, proxies=proxies, verify=certFile)    此后即可用 Fiddler 对 requests 请求于响应进行抓包。\n 此外有人说对 requests 和 certifi 版本有要求，可以参考一下。\n1 2  pip install requests==2.19.1 pip install certifi==2018.8.13   ","permalink":"https://fivekernels.github.io/posts/python-requests-with-fiddler/","summary":"开启 Fiddler 抓包时，python 中的 requests.get()、requests.post() 数据包无法捕获，且在请求 https 时会产生 ssl.SSLError: [SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:1091) 错","title":"使用 Fiddler 对 Python requests 请求进行抓包"},{"content":"Nginx 变量 赋值  变量名以 $ 开头：$hello 变量仅有一种类型：字符串 每行语句以分号结尾 使用 set 指令对变量赋值：  1  set $hello \u0026#34;hello\u0026#34;;   取值  使用变量时将变量写在双引号内，将会自动将其替换为实际内容 写在单引号内的变量不会被替换  1  print \u0026#34;this is $hello world.\u0026#34;;    变量后紧跟构成变量名的字符（字母、数字、下划线等），使用大括号消除歧义  1  print \u0026#34;this is ${hello}world.\u0026#34;;   详细信息：\nhttps://blog.csdn.net/u014296316/article/details/80973530\nhttp://blog.sina.com.cn/s/blog_6d579ff40100wi7p.html\n拼接 1  set $allUrl \u0026#34;${host}${request_uri}\u0026#34;;   内置变量 url 相关  $http_host $server_name $request_uri $uri\u0026lt;\u0026gt; $arg_\u0026lt;PARAMETER\u0026gt;: 客户端GET请求中 \u0026lt;PARAMETER\u0026gt;字段的值  客户端证书 参考：CSDN涂宗勋：nginx获取ca证书信息并传递到java后端使用\n nginx内部解析证书后，会把相关信息放到内置的变量中\n $ssl_client_cert：证书内容 $ssl_client_serial：证书序列号 $ssl_client_s_dn：证书subject   若要将客户端信息传递到后端，可以在 Nginx 配置文件中的 location 内加入 header 配置：\n1 2 3 4 5 6  location / { ...... proxy_set_header X-SSL-Client-Cert $ssl_client_cert; proxy_set_header X-SSL-serial $ssl_client_serial; proxy_set_header cert-subject $ssl_client_s_dn; }   其中，X-SSL-Client-Cert、X-SSL-serial、cert-subject为自定义变量名，供后端代码（java等）获取header值使用。\n1 2 3 4 5 6  public class CaController { @GetMapping(\u0026#34;/test\u0026#34;) public String caTest(@RequestHeader(\u0026#34;X-SSL-serial\u0026#34;) String serial, @RequestHeader(\u0026#34;X-SSL-Client-Cert\u0026#34;) String cert, @RequestHeader(\u0026#34;cert-subject\u0026#34;) String subject) { return serial + \u0026#34; \\r\u0026#34; + cert + \u0026#34; \\r\u0026#34; + subject; } }   表达式 正则表达式 regex    字符 描述     ^ 匹配输入字符串的起始位置   $ 匹配输入字符串的结束位置   \\d 匹配数字   \\ 将后面接着的字符标记为一个特殊字符或一个原义字符或一个向后引用。如\u0026quot;\\n\u0026quot;匹配一个换行符，而\u0026quot;\\$\u0026ldquo;则匹配\u0026rdquo;$\u0026quot;   [c] 匹配单个字符c   [a-z] 匹配 a-z 任意一个小写字母   . 匹配除换行符\u0026quot;\\n\u0026quot;之外的任何单个字符；若要匹配包括\u0026quot;\\n\u0026quot;在内的任意字符，使用如\u0026quot;[.\\n]\u0026ldquo;等模式。   {n} 重复n次   {n,} 重复n次或更多次   ? 匹配前面的字符0次或1次。如\u0026quot;do(es)?\u0026ldquo;能匹配\u0026quot;do\u0026quot;或者\u0026quot;does\u0026rdquo;，\u0026rdquo;?\u0026ldquo;等价于\u0026rdquo;{0,1}\u0026quot;   * 匹配前面的字符0次或多次。如\u0026quot;ol*\u0026ldquo;能匹配\u0026quot;o\u0026quot;及\u0026quot;ol\u0026rdquo;、\u0026ldquo;oll\u0026rdquo;   + 匹配前面的字符1次或多次。如\u0026quot;ol+\u0026ldquo;能匹配\u0026quot;ol\u0026quot;及\u0026quot;oll\u0026rdquo;、\u0026ldquo;oll\u0026rdquo;，但不能匹配\u0026quot;o\u0026quot;   (pattern) 匹配括号内pattern并可以在后面获取对应的匹配，常用$0...$9属性获取小括号中的匹配内容，要匹配圆括号字符需要Content    比较 数值比较:\n 比较两个变量/变量与字符串是否相等\n   符号 说明     = 相等   != 不相等    正则比较:\n 变量与正则表达式的模式是否匹配\n   符号 说明     ~ 匹配，区分大小写   ~* 匹配，不区分大小写   !~ 不匹配，区分大小写   !~* 不匹配，不区分大小写     Nginx 在匹配正则时会生成对应表达式中括号被匹配字符的变量，从左至右依次为：$1|$2|$3……可供后续程序中使用匹配内容。例如字符串\u0026quot;ID=user1_acdefg9876543GHI\u0026quot;，使用正则表达式\u0026quot;(ID=([-_a-zA-Z0-9]+))\u0026ldquo;进行匹配，所生成的变量：\n1 2  $1 = ID=user1_acdefg9876543GHI; $2 = user1_acdefg9876543GHI;   rewrite  将URL重定向。基本过程：（参考：博客园Dy1an：【04】Nginx：rewrite / if / return / set 和变量）\n 用户请求到达某个server，如果满足server内rewrite的正则匹配，那么rewrite将会对用户请求URI重写。 重写完成后直接在该server内部去匹配location。 当匹配到location后，如果location内部又有rewrite，那执行rewrite；之后再次在这个server内部去匹配location，直到请求返回。 这个过程不是无限的，nginx对于这样的跳转就支持10次，如果过多甚至死循环，则会报500错误。   基本语法：\n1  rewrite regex replacement [flag];   Examples Example 1  在正则比较中使用变量（参考：腾讯云社区问答：如何在nginx“if”正则表达式中使用变量？）\n以下语句似乎不起作用\n1 2 3 4  set $chk == \u0026#34;need\u0026#34;; set $me \u0026#34;kevin\u0026#34;; if ($uri ~ \u0026#34;by-{$me}\u0026#34;) { set $chk \u0026#34;\u0026#34;; } if ($chk == \u0026#34;need\u0026#34;) { ... }   Solution [待验证]\n1 2 3 4 5  set $chk == \u0026#34;need\u0026#34;; set $me \u0026#34;kevin\u0026#34;; if ($uri ~ /by-([^-]+)/) { set $by $1; } if ($by = $me) {set $chk \u0026#34;\u0026#34;;} if ($chk == \u0026#34;need\u0026#34;) { ... }   Example 2  去掉指定的url参数（去掉url中的start=\u0026hellip;，保留其他参数）：（参考segmentfault sPeng）\nSolution1 [待验证]\n1 2 3 4 5 6 7 8 9 10  location ~* filename(\\d+)\\.html$ { root /var/www/html; index index.html; if ($query_string ~ ^(.*)\u0026amp;start=(\\d+)\u0026amp;(.*)) { set $a $1; set $b $2; set $c $3; rewrite ^ /filename1?${a}\u0026amp;${c}? break; } }   Solution2 [待验证]\n1  rewrite ^(.*?)start=\\d+\\\u0026amp;?(.*)$ $1$2 last;   ","permalink":"https://fivekernels.github.io/posts/nginx-variable-and-expression-configuration/","summary":"Nginx 变量 赋值 变量名以 $ 开头：$hello 变量仅有一种类型：字符串 每行语句以分号结尾 使用 set 指令对变量赋值： 1 set $hello \u0026#34;hello\u0026#34;; 取值 使用变量时将变量写在双引号","title":"Nginx 语法 变量和表达式"},{"content":"Hugo 主题配置——Papermod 官方链接：\ngithub: https://github.com/adityatelange/hugo-PaperMod\ngithub wiki:https://github.com/adityatelange/hugo-PaperMod/wiki\ndemo code: https://github.com/adityatelange/hugo-PaperMod/tree/exampleSite/\ndemo: https://adityatelange.github.io/hugo-PaperMod//\n Papermod 主题默认使用 .yaml 格式作为配置文件，因此新建网站时可以使用 -f 设置 yml 格式：\n1  hugo new site \u0026lt;name of site\u0026gt; -f yml    将主题添加到网站文件夹中：\n1 2  git submodule add git@github.com:adityatelange/hugo-PaperMod.git themes/PaperMod --depth=1 git submodule update --init --recursive # needed when you reclone your repo (submodules may not get cloned automatically)   导航菜单与页面配置  \u0026hellip;待更新\u0026hellip;\n首页样式配置  \u0026hellip;待更新\u0026hellip;\n文章顶端信息 添加文章修改日期  将theme目录下的文件：layouts/partials/post_meta.html，复制到layouts对应目录下，并添加以下内容：\n1 2 3 4  \u0026lt;!-- 更新时间 --\u0026gt; {{- if (.Param \u0026#34;ShowLastMod\u0026#34;) -}} {{- $scratch.Add \u0026#34;meta\u0026#34; (slice (printf \u0026#34;Updated:\u0026amp;nbsp;%s\u0026#34; (.Lastmod.Format (.Site.Params.dateFormat | default \u0026#34;January 2, 2006\u0026#34;)))) }} {{- end }}    在Hugo的配置文件config.yml中的params下添加以下内容：\n1 2 3  params: ... ShowLastMod: true # 显示文章更新时间 配合post_meta.html   文章开头添加相应字段即可：\n1  lastmod: 2022-03-18T13:59:59+08:00   此外，可以在archetypes/default.md中添加lastmod字段，之后创建文章时会自动生成该部分内容。\n1  lastmod: {{ .Date }}   文章基础配置  \u0026hellip;待更新\u0026hellip;\n文章目录 TOC 侧边放置 参考：Sulv\u0026rsquo;s Blog: Hugo博客目录放在侧边 | PaperMod主题\ntoc代码  在Hugo根目录下的layouts文件夹下新建partials文件夹，并建立文件toc_side.html（\u0026lt;siteroot\u0026gt;/layouts/partials/toc_side.html），layouts文件夹中的内容优先级高于theme中主题的layouts文件夹。输入以下内容：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155  {{- $headers := findRE \u0026#34;\u0026lt;h[1-6].*?\u0026gt;(.|\\n])+?\u0026lt;/h[1-6]\u0026gt;\u0026#34; .Content -}} {{- $has_headers := ge (len $headers) 1 -}} {{- if $has_headers -}} \u0026lt;aside id=\u0026#34;toc-container\u0026#34; class=\u0026#34;toc-container wide\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;toc\u0026#34;\u0026gt; \u0026lt;details {{if (.Param \u0026#34;TocOpen\u0026#34;) }} open{{ end }}\u0026gt; \u0026lt;summary accesskey=\u0026#34;c\u0026#34; title=\u0026#34;(Alt + C)\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;details\u0026#34;\u0026gt;{{- i18n \u0026#34;toc\u0026#34; | default \u0026#34;Table of Contents\u0026#34; }}\u0026lt;/span\u0026gt; \u0026lt;/summary\u0026gt; \u0026lt;div class=\u0026#34;inner\u0026#34;\u0026gt; {{- $largest := 6 -}} {{- range $headers -}} {{- $headerLevel := index (findRE \u0026#34;[1-6]\u0026#34; . 1) 0 -}} {{- $headerLevel := len (seq $headerLevel) -}} {{- if lt $headerLevel $largest -}} {{- $largest = $headerLevel -}} {{- end -}} {{- end -}} {{- $firstHeaderLevel := len (seq (index (findRE \u0026#34;[1-6]\u0026#34; (index $headers 0) 1) 0)) -}} {{- $.Scratch.Set \u0026#34;bareul\u0026#34; slice -}} \u0026lt;ul\u0026gt; {{- range seq (sub $firstHeaderLevel $largest) -}} \u0026lt;ul\u0026gt; {{- $.Scratch.Add \u0026#34;bareul\u0026#34; (sub (add $largest .) 1) -}} {{- end -}} {{- range $i, $header := $headers -}} {{- $headerLevel := index (findRE \u0026#34;[1-6]\u0026#34; . 1) 0 -}} {{- $headerLevel := len (seq $headerLevel) -}} {{/* get id=\u0026#34;xyz\u0026#34; */}} {{- $id := index (findRE \u0026#34;(id=\\\u0026#34;(.*?)\\\u0026#34;)\u0026#34; $header 9) 0 }} {{- /* strip id=\u0026#34;\u0026#34; to leave xyz, no way to get regex capturing groups in hugo */ -}} {{- $cleanedID := replace (replace $id \u0026#34;id=\\\u0026#34;\u0026#34; \u0026#34;\u0026#34;) \u0026#34;\\\u0026#34;\u0026#34; \u0026#34;\u0026#34; }} {{- $header := replaceRE \u0026#34;\u0026lt;h[1-6].*?\u0026gt;((.|\\n])+?)\u0026lt;/h[1-6]\u0026gt;\u0026#34; \u0026#34;$1\u0026#34; $header -}} {{- if ne $i 0 -}} {{- $prevHeaderLevel := index (findRE \u0026#34;[1-6]\u0026#34; (index $headers (sub $i 1)) 1) 0 -}} {{- $prevHeaderLevel := len (seq $prevHeaderLevel) -}} {{- if gt $headerLevel $prevHeaderLevel -}} {{- range seq $prevHeaderLevel (sub $headerLevel 1) -}} \u0026lt;ul\u0026gt; {{/* the first should not be recorded */}} {{- if ne $prevHeaderLevel . -}} {{- $.Scratch.Add \u0026#34;bareul\u0026#34; . -}} {{- end -}} {{- end -}} {{- else -}} \u0026lt;/li\u0026gt; {{- if lt $headerLevel $prevHeaderLevel -}} {{- range seq (sub $prevHeaderLevel 1) -1 $headerLevel -}} {{- if in ($.Scratch.Get \u0026#34;bareul\u0026#34;) . -}} \u0026lt;/ul\u0026gt; {{/* manually do pop item */}} {{- $tmp := $.Scratch.Get \u0026#34;bareul\u0026#34; -}} {{- $.Scratch.Delete \u0026#34;bareul\u0026#34; -}} {{- $.Scratch.Set \u0026#34;bareul\u0026#34; slice}} {{- range seq (sub (len $tmp) 1) -}} {{- $.Scratch.Add \u0026#34;bareul\u0026#34; (index $tmp (sub . 1)) -}} {{- end -}} {{- else -}} \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; {{- end -}} {{- end -}} {{- end -}} {{- end }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;#{{- $cleanedID -}}\u0026#34; aria-label=\u0026#34;{{- $header | plainify -}}\u0026#34;\u0026gt;{{- $header | safeHTML -}}\u0026lt;/a\u0026gt; {{- else }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;#{{- $cleanedID -}}\u0026#34; aria-label=\u0026#34;{{- $header | plainify -}}\u0026#34;\u0026gt;{{- $header | safeHTML -}}\u0026lt;/a\u0026gt; {{- end -}} {{- end -}} \u0026lt;!-- {{- $firstHeaderLevel := len (seq (index (findRE \u0026#34;[1-6]\u0026#34; (index $headers 0) 1) 0)) -}} --\u0026gt; {{- $firstHeaderLevel := $largest }} {{- $lastHeaderLevel := len (seq (index (findRE \u0026#34;[1-6]\u0026#34; (index $headers (sub (len $headers) 1)) 1) 0)) }} \u0026lt;/li\u0026gt; {{- range seq (sub $lastHeaderLevel $firstHeaderLevel) -}} {{- if in ($.Scratch.Get \u0026#34;bareul\u0026#34;) (add . $firstHeaderLevel) }} \u0026lt;/ul\u0026gt; {{- else }} \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; {{- end -}} {{- end }} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/details\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/aside\u0026gt; \u0026lt;script\u0026gt; let activeElement; let elements; window.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function (event) { checkTocPosition(); elements = document.querySelectorAll(\u0026#39;h1[id],h2[id],h3[id],h4[id],h5[id],h6[id]\u0026#39;); // Make the first header active  activeElement = elements[0]; const id = encodeURI(activeElement.getAttribute(\u0026#39;id\u0026#39;)).toLowerCase(); document.querySelector(`.inner ul li a[href=\u0026#34;#${id}\u0026#34;]`).classList.add(\u0026#39;active\u0026#39;); }, false); window.addEventListener(\u0026#39;resize\u0026#39;, function(event) { checkTocPosition(); }, false); window.addEventListener(\u0026#39;scroll\u0026#39;, () =\u0026gt; { // Check if there is an object in the top half of the screen or keep the last item active  activeElement = Array.from(elements).find((element) =\u0026gt; { if ((getOffsetTop(element) - window.pageYOffset) \u0026gt; 0 \u0026amp;\u0026amp; (getOffsetTop(element) - window.pageYOffset) \u0026lt; window.innerHeight/2) { return element; } }) || activeElement elements.forEach(element =\u0026gt; { const id = encodeURI(element.getAttribute(\u0026#39;id\u0026#39;)).toLowerCase(); if (element === activeElement){ document.querySelector(`.inner ul li a[href=\u0026#34;#${id}\u0026#34;]`).classList.add(\u0026#39;active\u0026#39;); } else { document.querySelector(`.inner ul li a[href=\u0026#34;#${id}\u0026#34;]`).classList.remove(\u0026#39;active\u0026#39;); } }) }, false); const main = parseInt(getComputedStyle(document.body).getPropertyValue(\u0026#39;--article-width\u0026#39;), 10); const toc = parseInt(getComputedStyle(document.body).getPropertyValue(\u0026#39;--toc-width\u0026#39;), 10); const gap = parseInt(getComputedStyle(document.body).getPropertyValue(\u0026#39;--gap\u0026#39;), 10); function checkTocPosition() { const width = document.body.scrollWidth; if (width - main - (toc * 2) - (gap * 4) \u0026gt; 0) { document.getElementById(\u0026#34;toc-container\u0026#34;).classList.add(\u0026#34;wide\u0026#34;); } else { document.getElementById(\u0026#34;toc-container\u0026#34;).classList.remove(\u0026#34;wide\u0026#34;); } } function getOffsetTop(element) { if (!element.getClientRects().length) { return 0; } let rect = element.getBoundingClientRect(); let win = element.ownerDocument.defaultView; return rect.top + win.pageYOffset; } \u0026lt;/script\u0026gt; {{- end }}   调用代码  找到主题目录下的layouts/_default/single.html文件，将其复制到根目录下的layouts/_default/single.html中，找到其调用代码\n1 2 3  {{- if (.Param \u0026#34;ShowToc\u0026#34;) }} {{- partial \u0026#34;toc.html\u0026#34; . }}  {{- end }}   修改为\n1 2 3 4  {{- if (.Param \u0026#34;ShowToc\u0026#34;) }} \u0026lt;!-- {{- partial \u0026#34;toc.html\u0026#34; . }} --\u0026gt; {{- partial \u0026#34;toc_side.html\u0026#34; . }}  {{- end }}   修改css  在Hugo根目录新建assets文件夹，此时该目录比theme主题目录中的assets文件夹具有更高的优先级。在根目录下的assets中创建css/extended/blank.css，加入以下代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76  :root { --nav-width: 1380px; --article-width: 650px; --toc-width: 300px; } .toc { margin: 0 2px 40px 2px; border: 1px solid var(--border); background: var(--entry); border-radius: var(--radius); padding: 0.4em; } .toc-container.wide { position: absolute; height: 100%; border-right: 1px solid var(--border); left: calc((var(--toc-width) + var(--gap)) * -1); top: calc(var(--gap) * 2); width: var(--toc-width); } .wide .toc { position: sticky; top: var(--gap); border: unset; background: unset; border-radius: unset; width: 100%; margin: 0 2px 40px 2px; } .toc details summary { cursor: zoom-in; margin-inline-start: 20px; padding: 12px 0; } .toc details[open] summary { font-weight: 500; } .toc-container.wide .toc .inner { margin: 0; } .active { font-size: 110%; font-weight: 600; } .toc ul { list-style-type: circle; } .toc .inner { margin: 0 0 0 20px; padding: 0px 15px 15px 20px; font-size: 16px; } .toc li ul { margin-inline-start: calc(var(--gap) * 0.5); list-style-type: none; } .toc li { list-style: none; font-size: 0.95rem; padding-bottom: 5px; } .toc li a:hover { color: var(--secondary); }    重新生成站点即可预览效果。\n","permalink":"https://fivekernels.github.io/posts/hugo-configuration-theme-papermod/","summary":"Hugo 主题配置——Papermod 官方链接： github: https://github.com/adityatelange/hugo-PaperMod github wiki:https://github.com/adityatelange/hugo-PaperMod/wiki demo code: https://github.com/adityatelange/hugo-PaperMod/tree/exampleSite/ demo: https://adityatelange.github.io/hugo-PaperMod// Papermod 主题默认使用 .yaml 格式作为配置文件，因此新建网站时可以使用 -f 设置 yml 格式： 1 hugo new site \u0026lt;name of","title":"Hugo 主题配置——Papermod"},{"content":"站点配置  从Hugo主题网站上找一个喜欢的主题，使用git同步到本地代码仓库的themes文件夹。下面挑了两个比较喜欢的：\n1 2  git submodule add git@github.com:dillonzq/LoveIt.git themes/LoveIt git submodule add git@github.com:google/docsy.git themes/docsy    将主题信息写入hugo配置文件config.toml，在config.toml添加一行：\n1  theme = \u0026#34;LoveIt\u0026#34;    同时可以配置一下其他信息，某些主题会有特定的规范。以LoveIt主题为例\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49  baseURL = \u0026#34;http://example.org/\u0026#34; defaultContentLanguage = \u0026#34;zh-cn\u0026#34; # 默认语言 [en, zh-cn, fr, ...]  languageCode = \u0026#34;zh-CN\u0026#34; # 网站语言, 仅在这里 CN 大写 hasCJKLanguage = true # 是否包括中日韩文字 title = \u0026#34;我的全新 Hugo 网站\u0026#34; # 网站标题 # 更改使用 Hugo 构建网站时使用的默认主题 theme = \u0026#34;LoveIt\u0026#34; [params] # LoveIt 主题版本 version = \u0026#34;0.2.X\u0026#34; [menu] [[menu.main]] identifier = \u0026#34;posts\u0026#34; # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \u0026#34;\u0026#34; # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \u0026#34;\u0026#34; name = \u0026#34;文章\u0026#34; url = \u0026#34;/posts/\u0026#34; # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \u0026#34;\u0026#34; weight = 1 [[menu.main]] identifier = \u0026#34;tags\u0026#34; pre = \u0026#34;\u0026#34; post = \u0026#34;\u0026#34; name = \u0026#34;标签\u0026#34; url = \u0026#34;/tags/\u0026#34; title = \u0026#34;\u0026#34; weight = 2 [[menu.main]] identifier = \u0026#34;categories\u0026#34; pre = \u0026#34;\u0026#34; post = \u0026#34;\u0026#34; name = \u0026#34;分类\u0026#34; url = \u0026#34;/categories/\u0026#34; title = \u0026#34;\u0026#34; weight = 3 # Hugo 解析文档的配置 [markup] # 语法高亮设置 (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false 是必要的设置 (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false    待补充\u0026hellip;\n","permalink":"https://fivekernels.github.io/posts/hugo-configuration-theme-loveit/","summary":"站点配置 从Hugo主题网站上找一个喜欢的主题，使用git同步到本地代码仓库的themes文件夹。下面挑了两个比较喜欢的： 1 2 git submodule add git@github.com:dillonzq/LoveIt.git themes/LoveIt git submodule add","title":"Hugo 主题配置——loveit"},{"content":" hey\nHugo 目录结构 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  .(hugo-root) |-- archetypes/ (内容模板文件) |-- assets/ (not created by default) | |-- css/ (adding custom css to replace css in themes) | | |-- *.* | | `-- *.* | `-- ***/ |-- content/ (存放文章内容，通过\u0026#34;hugo new\u0026#34;创建的文件以此为根目录) | `-- posts/ | `-- *.md |-- data/ (存储网站用到一些配置、数据文件。文件类型可以是yaml|toml|json等格式，生成网站时使用) |-- docs/ (github pages可以选用docs作为网站根目录，添加publishdir: \u0026#39;docs\u0026#39;将网站生成在该目录下) |-- layouts/ (渲染文章内容的模板文件，相较于themes/\u0026lt;theme-name\u0026gt;/layouts目录下的同名文件具有更高优先级) |-- resources/ |-- static/ (存储图片、css、js等静态资源文件；md中引用图片的根目录位于此文件夹下) |-- themes/ (存储不同主题，可以方便的切换网站的风格样式) `-- config.yml (或config.toml，config.json，网站默认配置文件)   tree \u0026ndash;dirsfirst \u0026ndash;charset=ascii /path/to/directory将生成一个很好的ASCII树，可以将其整合到文档中：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  (example fire tree) | |-- de-DE | | |-- art.mshc | | |-- artnoloc.mshc | | |-- clientserver.mshc | | |-- noarm.mshc | | |-- resources.mshc | | `-- windowsclient.mshc | `-- en-US | |-- art.mshc | |-- artnoloc.mshc | |-- clientserver.mshc | |-- noarm.mshc | |-- resources.mshc | `-- windowsclient.mshc `-- IndexStore |-- de-DE | |-- art.mshi | |-- artnoloc.mshi | |-- clientserver.mshi | |-- noarm.mshi | |-- resources.mshi | `-- windowsclient.mshi `-- en-US |-- art.mshi |-- artnoloc.mshi |-- clientserver.mshi |-- noarm.mshi |-- resources.mshi `-- windowsclient.mshi   静态资源（图片等）存放方式 \u0026hellip;待更新\u0026hellip;\n","permalink":"https://fivekernels.github.io/posts/hugo-content-management/","summary":"hey Hugo 目录结构 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 .(hugo-root) |-- archetypes/ (内容模板文件) |-- assets/ (not created by default) | |-- css/ (adding custom css to replace css in themes) | | |-- *.* | | `-- *.* | `-- ***/ |-- content/ (存放文章内","title":"Hugo 文件管理"},{"content":"GitHub Pages  GitHub Pages 本质上是一个静态网站托管系统，比较常用的是个人站点，也就是创建名为\u0026quot;\u0026lt;username\u0026gt;.github.io\u0026quot;的仓库作为一个静态网页入口。它有3种存在方式：\n 识别 main branch 根目录下的：README.md 或 index.html 识别 main branch /docs 目录下的：README.md 或 index.html 识别 gh-pages branch 根目录下的：README.md 或 index.html   因此我们可以在GitHub上创建一个名为\u0026lt;username\u0026gt;.github.io的public仓库，如果想方便的查看效果，可以勾选生成默认的readme.md，之后访问\u0026lt;username\u0026gt;.github.io即可看到效果。如果希望自定义网页内容，则可以不勾选生成readme.md，而将其克隆到本地：\n1 2 3  git clone git@github.com:\u0026lt;username\u0026gt;/\u0026lt;username\u0026gt;.github.io.git cd \u0026lt;username\u0026gt;.github.io echo \u0026#34;Hello World\u0026#34; \u0026gt; index.html    之后推到GitHub，访问\u0026lt;username\u0026gt;.github.io即可看到效果。\n1 2 3  git add --all git commit -m \u0026#34;Initial commit\u0026#34; git push -u origin main   参考：GitHub官方教程\nHugo 官网连接： Hugo_Quick-Start\n下载 Hugo Github https://github.com/gohugoio/hugo/releases\n Windows中无需安装，解压到喜欢的位置后将hugo.exe所在路径添加到环境变量中（可选）即可。 在git bash中敲入一下命令确认可以执行；不建议使用Powershell，因为后续使用echo等命令时会造成乱码。\n1  hugo version   创建 Hugo 站点 1  hugo new site quickstart    找到一个你喜欢在本地存放代码的文件夹，执行这段代码，然后存放代码仓库的文件夹“quickstart”将会被创建，内部已经生成了Hugo所必须的一些代码。此时可以切换到代码仓库：\n1  cd quickstart    之后可以使用git初始化代码仓库：\n1  git init   站点配置  打开站点目录下的 config.toml (或 config.yml)，添加或修改如下配置信息：\n   1 2 3 4 5 6 7 8  languageCode: zh-CN # CN大写? publishdir: \u0026#39;docs\u0026#39; # 发布文件夹，配合 github pages 将网页文件生成到docs文件夹中 defaultContentLanguage: \u0026#34;zh-cn\u0026#34; # 默认语言[en, zh-cn, fr, ...] 影响生成html的lang hasCJKLanguage: true # 包含中日韩文等，使字数统计准确 isCJKLanguage: true theme: \u0026#34;PaperMod\u0026#34; # 选择的主题的文件夹名   代码行号  上述配置并不能将网页内代码行号显示出来，因此在[markup.highlight]下添加配置（具体参见官方文档）：\n1  linenos = true    其他未测试配置（来自https://huangzhongde.cn/post/2020-02-22-hugo-code-linenumber/）\n1 2 3 4 5 6 7 8 9 10 11 12  pygmentsUseClasses = true [markup] [markup.highlight] codeFences = true guessSyntax = true hl_Lines = \u0026#34;\u0026#34; lineNoStart = 1 lineNos = true lineNumbersInTable = false noClasses = true style = \u0026#34;github\u0026#34; tabWidth = 4    防复制行号（未测试、可能使用的主题不需要配置）\n1 2 3 4 5 6 7 8 9  .highlight .ln { width: 20px; display: block; float: left; text-align: right; user-select: none; /* 复制是不能被选中，其他的是格式上的调整 */ padding-right: 8px; color: #ccc; }    其他配置详见 Hugo 主题配置文章\n创建文章 1 2  hugo new \u0026lt;content内文件夹路径\u0026gt;/\u0026lt;文章文件名.md\u0026gt; hugo new posts/my-first-post.md    以上命令在代码仓库中content\\posts文件夹中创建文章草稿\u0026quot;my-first-post.md\u0026quot;。\n打开\u0026quot;my-first-post.md\u0026quot;，文件开头\u0026quot;\u0026mdash;\u0026ldquo;之间已经存在预先生成的信息：\n1 2 3 4 5  --- title: \u0026#34;my-first-post\u0026#34; date: 2021-10-21T20:09:21+08:00 draft: true ---    draft默认为true，此时不会被生成到网页中；编辑完成内容后将其修改为false以参与网页构建，或使用-D参数使草稿临时参与构建。\n构建网页  在本地生成，-D表示构建草稿。使用浏览器访问http://localhost:1313进行预览。\n1 2  hugo server -D hugo    正式构建网页，默认构建在/public目录中。\n1  hugo   将 Hugo 与 GitHub 建立连接  Github Pages中静态文件的存放位置有以下三种：（仓库中settings）\n main 分支 main 分支下docs目录 gh-pages 分支(前提是这个分支存在)  为实现hugo静态页面的发布，可以在config.toml中添加以下配置：\n1  publishdir = \u0026#39;docs\u0026#39;    此后运行hugo命令将会使生成的网页文件保存在/docs目录下。将整个代码仓库推送到GitHub的main分支上，并在settings中设置站点source为main /docs。访问https://\u0026lt;username\u0026gt;.github.io即可看到成果。\n使用main分支的docs文件夹的好处是推一次代码就可以将源文档和构建的页面一起发布到GitHub中；如果希望对源文档和构建页面分别进行版本管理，则可以单独新建分支gh-pages（未测试）：参考https://zhuanlan.zhihu.com/p/37752930\n无需修改hugo的publishdir，直接将/public子目录添加到.gitignore文件中，使main分支忽略其更新；之后新建分支gh-pages。\n1 2 3 4 5 6 7 8  # 忽略public子目录 echo \u0026#34;public\u0026#34; \u0026gt;\u0026gt; .gitignore # 初始化gh-pages branch git checkout --orphan gh-pages git reset --hard git commit --allow-empty -m \u0026#34;Initializing gh-pages branch\u0026#34; git push origin gh-pages git checkout master    为了提高每次发布的效率，可以将下述命令存在脚本中，每次只需要运行该脚本即可将gh-pages branch中的文章发布到Github的repo中：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  #!/bin/sh  if [[ $(git status -s) ]] then echo \u0026#34;The working directory is dirty. Please commit any pending changes.\u0026#34; exit 1; fi echo \u0026#34;Deleting old publication\u0026#34; rm -rf public mkdir public rm -rf .git/worktrees/public/ echo \u0026#34;Checking out gh-pages branch into public\u0026#34; git worktree add -B gh-pages public origin/gh-pages echo \u0026#34;Removing existing files\u0026#34; rm -rf public/* echo \u0026#34;Generating site\u0026#34; hugo echo \u0026#34;Updating gh-pages branch\u0026#34; cd public \u0026amp;\u0026amp; git add --all \u0026amp;\u0026amp; git commit -m \u0026#34;Publishing to gh-pages (publish.sh)\u0026#34; echo \u0026#34;Push to origin\u0026#34; git push origin gh-pages    最后将main分支中的源文档和gh-pages分支h中的网页文档分别push到Github仓库中，进入settings将source选定gh-pages即可。\n添加个人域名 CloudFlare https \u0026hellip;待补充\u0026hellip;https://zhuanlan.zhihu.com/p/37752930\n","permalink":"https://fivekernels.github.io/posts/deploy-githubpages-by-hugo/","summary":"GitHub Pages GitHub Pages 本质上是一个静态网站托管系统，比较常用的是个人站点，也就是创建名为\u0026quot;\u0026lt;username\u0026gt;.github.io\u0026","title":"使用 Hugo 搭建 GitHub Pages"},{"content":"h2 标题 h3 标题 纯文本\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;.\nlihe! ihe! he! e! ! 1 2 3 4 5 6  #include \u0026lt;stdio.h\u0026gt;int main(void) { printf(\u0026#34;hello world\u0026#34;); return 0; }   ","permalink":"https://fivekernels.github.io/posts/my-first-post/","summary":"h2 标题 h3 标题 纯文本\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;. lihe! ihe! he! e! ! 1 2 3 4 5 6 #include \u0026lt;stdio.h\u0026gt;int main(void) { printf(\u0026#34;hello world\u0026#34;); return 0; }","title":"My First Post"}]